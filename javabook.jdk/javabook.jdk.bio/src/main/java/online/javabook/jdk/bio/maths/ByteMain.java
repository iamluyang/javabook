package online.javabook.jdk.bio.maths;

/**
 * 原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值
 * 例如: int  128的源码 - 00000000 00000000 00000000 10000000
 * 例如: int -128的源码 - 10000000 00000000 00000000 10000000
 *
 * 反码的表示方法是: 正数的反码是其本身, 负数的反码是在其原码的基础上, 符号位不变，其余各个位取反
 * 例如: int  128的反码 - 00000000 00000000 00000000 10000000
 * 例如: int -128的反码 - 11111111 11111111 11111111 01111111
 *
 * 补码的表示方法是: 正数的补码是其本身, 负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)
 * 例如: int  128的补码 - 00000000 00000000 00000000 10000000
 * 例如: int -128的补码 - 11111111 11111111 11111111 10000000
 */
public class ByteMain {
    public static void main(String[] args) {

        System.out.println("-------------------------------------------------------------------");

        // int降级为byte
        // 00000000 00000000 00000000 01111111(127的整形) 截断前面24位-> 01111111
        byte b127 = (byte) 127;

        // byte提升为int的推导
        int  i127 = (int)b127;
        // "前面填充 0":                            01111111 => 00000000 00000000 00000000 01111111
        // "补码形式  ": 00000000 00000000 00000000 01111111 => 00000000 00000000 00000000 01111111
        // "然后形式  ": 00000000 00000000 00000000 01111111 => 00000000 00000000 00000000 01111111

        System.out.println("b127:" + i127); // 127
        System.out.println("i127.toBinaryString:" + Integer.toBinaryString(b127)); // 01111111

        System.out.println("-------------------------------------------------------------------");

        // int降级为byte
        // 00000000 00000000 00000000 100000000(128的整形) 截断前面24位-> 10000000
        byte b128 = (byte) 128;

        // byte提升为int的推导
        int  i128 = (int)b128;
        // "前面填充 1 :                            10000000"    => 11111111 11111111 11111111 10000000
        // "补码形式-1": 11111111 11111111 11111111 10000000 - 1 => 11111111 11111111 11111111 01111111
        // "补码取反  ": 11111111 11111111 11111111 01111111     => 10000000 00000000 00000000 10000000

        System.out.println("b128:" + i128); // -128
        System.out.println("i128.toBinaryString:" + Integer.toBinaryString((byte) b128)); // 11111111 11111111 11111111 10000000

        System.out.println("-------------------------------------------------------------------");

        // 0xff隐式是一个int类型，即二进制为： 00000000 00000000 00000000 11111111
        int i4 = (byte) 128 & (int)0xff; // 00000000 00000000 00000000 10000000 & 00000000 00000000 00000000 11111111
        System.out.println(i4);  // 00000000 00000000 00000000 10000000 (即转成了int的128，意味着低位保持不变，高位补0)
    }
}
